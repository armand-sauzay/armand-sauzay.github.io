<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI/CD on Armand Sauzay</title>
    <link>//localhost:1313/tags/ci/cd/</link>
    <description>Recent content in CI/CD on Armand Sauzay</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jun 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/ci/cd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enhance Your CI Workflow with Pre-Commit Checks</title>
      <link>//localhost:1313/articles/pre-commit-checks/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/articles/pre-commit-checks/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve all encountered commit messages like &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;modif&lt;/code&gt;, or &lt;code&gt;reran notebook&lt;/code&gt;. These vague messages make navigating the commit history unnecessarily challenging. Additionally, inconsistent file formatting can cause friction in collaborative environments, leading to wasted time resolving trivial issues after commits.&lt;/p&gt;&#xA;&lt;p&gt;Fortunately, you can proactively address these problems with &lt;strong&gt;pre-commit checks&lt;/strong&gt;, ensuring both commit messages and file formats are correct &lt;strong&gt;before&lt;/strong&gt; they reach your repository.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-pre-commit-checks&#34;&gt;What are Pre-Commit Checks?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Pre-commit checks&lt;/strong&gt; are automated scripts executed right before you commit code. They enforce predefined standards, such as file formatting rules (e.g., Pythonâ€™s Black formatter) and structured commit messages (like Conventional Commits). By catching issues early, pre-commit checks help maintain a clean, readable, and consistent codebase.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
